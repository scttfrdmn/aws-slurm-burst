name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23', '1.22']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: make test-coverage-ci

    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.23'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage.out
        fail_ci_if_error: true

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec ./...

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=$(cat VERSION)
        BUILD_TIME=$(date +%Y-%m-%dT%H:%M:%S%z)
        COMMIT_HASH=${{ github.sha }}
        LDFLAGS="-ldflags \"-X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.commitHash=${COMMIT_HASH}\""

        mkdir -p build
        go build ${LDFLAGS} -o build/resume-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/resume
        go build ${LDFLAGS} -o build/suspend-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/suspend
        go build ${LDFLAGS} -o build/state-manager-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/state-manager

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: build/

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Run integration tests
      run: make test-integration
      env:
        AWS_REGION: us-east-1

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        for dir in artifacts/binaries-*; do
          platform=$(basename "$dir" | sed 's/binaries-//')
          cd "$dir"
          tar -czf "../../release/aws-slurm-burst-${platform}.tar.gz" *
          cd - > /dev/null
        done

    - name: Generate release notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        awk '/^## \['"$VERSION"'\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_notes.md
        files: release/*.tar.gz
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}